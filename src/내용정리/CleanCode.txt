
1. 의미 있는 이름 사용

변수, 함수, 클래스에 직관적인 이름 부여 (Use Intention-Revealing Names): 이름만 보고도 그 목적을 알 수 있도록 직관적인 이름을 사용해야 함.
발음하기 쉬운 이름 (Pronounceable Names): 복잡한 약어 또는 의미 없는 문자를 사용하지 않고, 사람들이 읽고 이해하기 쉬운 이름을 사용.
일관된 명명법 (Consistent Naming Conventions): 변수, 함수, 클래스 등에서 같은 역할을 하는 요소는 일관된 이름 패턴을 따름.
그룹화를 통한 명확한 의미 전달 (Use Class and Function Grouping): 클래스와 메서드는 관련된 요소끼리 그룹화하여 책임을 명확하게 분리.

2. 함수 작성

작은 함수 (Small Functions): 각 함수는 작고 단일 책임만을 처리해야 하며, 보통 20줄을 넘지 않도록 함.
함수 하나는 하나의 일을 해야 한다 (Do One Thing): 함수는 하나의 작업만 처리하고, 그 작업이 완벽하게 수행되도록 작성.
의미 있는 매개변수 (Meaningful Parameters): 함수에 전달하는 매개변수는 최소화하고, 가능한 경우 객체나 클래스 내부의 데이터를 이용.

3. 코드 형식과 구조

가독성 높은 코드 (Readable Code): 코드 포매팅과 스타일에 주의하여 가독성을 높이는 것이 중요. 적절한 들여쓰기, 공백 사용 등을 통해 쉽게 읽을 수 있는 코드 작성.
블록 정리 (Clean Block Structure): 중첩된 블록이 너무 깊어지지 않도록 하고, 각 블록이 명확하게 구분되도록 코드 작성.
관련 코드는 가까이 배치 (Keep Related Code Together): 관련 있는 변수, 함수, 클래스는 코드에서 물리적으로 가까운 위치에 배치하여 가독성 높임.

4. 주석 사용

필요한 곳에만 주석 (Comments Where Necessary): 코드 자체가 의미를 드러내지 못하는 경우에만 주석을 사용하고, 주석을 남발하지 않음.
잘못된 주석은 코드보다 나쁘다 (Bad Comments Are Worse Than No Comments): 부정확하거나 오래된 주석은 혼란을 일으킬 수 있으므로, 주석이 정확하지 않다면 없는 것이 나음.
설명 대신 코드 개선 (Explain Yourself in Code): 설명이 필요한 코드는 리팩터링하여 코드 자체가 설명이 되도록 만듦.

5. 오류 처리

예외를 사용하여 오류 처리 (Use Exceptions for Error Handling): 오류 코드를 반환하는 대신, 예외를 사용하여 명확하게 오류를 처리.
특정한 예외 클래스 사용 (Specific Exception Types): 범용적인 예외보다는 상황에 맞는 구체적인 예외 클래스를 사용하여, 예외를 더 명확하게 관리.
오류 처리를 한 곳에 집중 (Consolidate Error Handling): 코드 전체에 오류 처리 로직을 흩어놓지 말고, 가능한 한 중앙에서 처리할 수 있도록 만듦.

6. 클래스 설계

단일 책임 원칙 (Single Responsibility Principle): 클래스는 하나의 책임만을 가져야 하며, 하나의 클래스가 여러 일을 담당하면 안 됨.
작은 클래스 (Small Classes): 하나의 클래스는 가능한 한 작게 유지하고, 관련된 기능을 여러 클래스로 분리하는 것이 바람직함.
캡슐화 (Encapsulation): 클래스 내부의 구현 세부 사항은 숨기고, 외부에서는 인터페이스를 통해서만 접근할 수 있도록 캡슐화.

7. 조건문 간소화

명료한 조건문 (Readable Conditions): 복잡한 조건문은 함수나 변수로 추출하여 더 명확하게 작성.
삼항 연산자 사용 자제 (Avoid Ternary Operators for Complex Conditions): 삼항 연산자는 간단한 경우에만 사용하고, 복잡한 경우에는 피할 것.
부정 조건문 사용 자제 (Avoid Negative Conditions): 부정형 조건문은 가독성을 떨어뜨릴 수 있으므로 가능한 긍정형 조건으로 작성.

8. 객체지향 원칙

객체 간의 책임 분리 (Separation of Concerns): 서로 다른 객체가 서로의 내부 구현을 알지 않도록 책임을 명확히 분리.
의존성 역전 원칙 (Dependency Inversion Principle): 상위 모듈이 하위 모듈에 의존하지 않도록 하고, 인터페이스를 통해 의존성을 분리.
의존성 주입 (Dependency Injection): 객체의 의존성을 외부에서 주입받도록 하여 결합도를 낮추고 테스트 용이성을 높임.

9. 테스트 주도 개발 (TDD)

테스트 가능 코드 작성 (Write Testable Code): 테스트 가능한 코드를 작성하여, 코드 품질을 유지하고 지속적인 리팩터링을 용이하게 함.
단위 테스트 중요성 (Importance of Unit Tests): 작은 단위의 코드에 대한 테스트를 작성하여 오류를 조기에 발견하고, 코드의 신뢰성을 높임.
의미 있는 테스트 케이스 작성 (Write Meaningful Test Cases): 각 테스트는 특정한 동작을 명확히 테스트하며, 테스트 실패 시 원인을 쉽게 파악할 수 있도록 작성.

10. 중복 코드 제거

DRY 원칙 (Don't Repeat Yourself): 중복된 코드를 없애고, 공통된 로직을 하나의 함수나 모듈로 추출하여 재사용성을 높임.
추상화 사용 (Use Abstraction): 중복된 로직이 여러 곳에서 사용될 경우 추상화를 통해 코드를 재사용 가능하게 만듦.