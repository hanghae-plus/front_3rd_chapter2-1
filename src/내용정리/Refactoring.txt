가독성, 유지보수성, 성능을 향상시키는 방법 


1. 코드의 명확성 향상
● 함수 추출하기 (Extract Function): 
여러 작업을 수행하는 긴 함수에서 의미 있는 부분을 별도의 함수로 분리하여 가독성을 높임.

● 변수 추출하기 (Extract Variable): 
복잡한 식이나 논리식을 설명하기 쉽게 지역 변수를 도입하여 코드 가독성을 향상.

● 이름 바꾸기 (Rename): 
변수, 함수, 클래스 등의 이름을 더 직관적이고 이해하기 쉽게 변경.

2.중복 코드 제거
● 중복된 코드 통합 (Consolidate Duplicate Conditional Fragments): 
동일한 조건 로직이 반복될 때 이를 하나의 함수나 변수로 통합

● 템플릿 메소드 패턴 사용 (Use Template Method): 
상속 계층에서 중복된 코드를 상위 클래스에 올려 처리하고, 자식 클래스에서 세부 사항만 구현.

3.조건문 단순화
● 조건부 로직을 다형성으로 변경 (Replace Conditional with Polymorphism): 
여러 분기 처리로 인한 복잡성을 다형성(상속/인터페이스)을 이용하여 단순화.

● 조건문 분해 (Decompose Conditional): 
복잡한 조건문을 간단한 조건문으로 나누거나, 각각의 조건을 함수로 추출.

● Guard Clauses 도입 (Introduce Guard Clauses): 
조건을 조기에 확인하여 코드 흐름을 단순하게 만들기.

4. 메서드 정리
● 매개변수 객체 만들기 (Introduce Parameter Object): 
여러 개의 매개변수가 관련이 있을 경우, 이를 하나의 객체로 묶어 처리.

● 메서드 매개변수 줄이기 (Remove Parameter): 
불필요한 매개변수를 제거하여 메서드를 간결하게.

● 매개변수 목록을 객체로 변환 (Replace Parameter with Object): 
여러 매개변수를 객체로 변환하여 메서드 시그니처를 간단하게 함.

5. 데이터 구조 및 접근성 개선
● 컬렉션 캡슐화 (Encapsulate Collection):
 외부에서 직접 컬렉션을 변경하는 대신, 캡슐화를 통해 변경의 책임을 클래스 내부로 제한.

● Getter와 Setter 사용 (Encapsulate Field):
 필드를 직접 접근하지 않고, Getter와 Setter를 사용하여 외부에서 제어할 수 있도록 만듦.

● 계산된 데이터를 질의 메서드로 변환 (Replace Derived Variable with Query):
 상태를 유지하기 위해 중복된 값을 저장하는 대신, 필요할 때마다 계산해서 반환하는 방식으로 변경.

6. 객체 관계 개선
● 메서드 이동하기 (Move Method): 
특정 클래스에 너무 의존적인 메서드는 해당 클래스 내로 이동.

● 필드 이동하기 (Move Field):
 필드 역시 적절한 위치로 이동하여 데이터와 행동을 근접하게 배치.

● 위임 숨기기 (Hide Delegate): 
클라이언트 코드가 불필요하게 객체 내부의 위임 관계를 알지 않도록 인터페이스를 통해 숨김.

7. 데이터 흐름 최적화
● 변수를 인라인으로 대체 (Inline Variable):
 불필요한 중간 변수를 제거하고, 직접 표현식을 사용할 수 있도록 변경.

● 변수 이름 변경 (Rename Variable):
 데이터 흐름을 명확하게 하기 위해 더 의미 있는 변수명으로 변경.
8. 상속 구조 개선

● 클래스를 계층으로 이동 (Push Down Method/Field):
 상위 클래스에 있는 메서드나 필드를 하위 클래스에만 필요한 경우 하위 클래스로 이동.

● 계층을 위로 이동 (Pull Up Method/Field):
 하위 클래스들이 공통으로 사용하는 메서드나 필드를 상위 클래스로 이동.
9. 코드 구조 간결화

● 죽은 코드 제거 (Remove Dead Code):
 더 이상 사용되지 않는 코드를 제거하여 코드베이스를 깔끔하게 유지.

● 불필요한 클래스 제거 (Collapse Hierarchy):
 불필요한 상속 구조가 있는 경우 상위 클래스와 하위 클래스를 병합